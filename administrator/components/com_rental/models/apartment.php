<?php
/**
 * @version		$Id: apartment.php $
 * @copyright	Copyright (C) 2005 - 2011 Open Source Matters, Inc. All rights reserved.
 * @license		GNU General Public License version 2 or later; see LICENSE.txt
 * @author		muinx
 * This component was generated by http://joomlavietnam.net/ - 2012
 */
 
/**
 Generate by Component Gen Code - 2012
 */

// No direct access.
defined('_JEXEC') or die;

jimport('joomla.application.component.modeladmin');

/**
 * Apartment model.
 *
 * @package		Joomla.Administrator
 * @subpackage	com_rental
 * @since		1.6
 */
class RentalModelApartment extends JModelAdmin
{
	/**
	 * @var		string	The prefix to use with controller messages.
	 * @since	1.6
	 */
	protected $text_prefix = 'COM_RENTAL_APARTMENT';
	
	/**
	 * Returns a reference to the a Table object, always creating it.
	 *
	 * @param	type	The table type to instantiate
	 * @param	string	A prefix for the table class name. Optional.
	 * @param	array	Configuration array for model. Optional.
	 * @return	JTable	A database object
	 * @since	1.6
	 */
	public function getTable($type = 'Apartment', $prefix = 'RentalTable', $config = array())
	{
		return JTable::getInstance($type, $prefix, $config);
	}

	/**
	 * Method to get the record form.
	 *
	 * @param	array	$data		Data for the form.
	 * @param	boolean	$loadData	True if the form is to load its own data (default case), false if not.
	 * @return	mixed	A JForm object on success, false on failure
	 * @since	1.6
	 */
	public function getForm($data = array(), $loadData = true)
	{
		// Get the form.
		$form = $this->loadForm('com_rental.apartment', 'apartment', array('control' => 'jform', 'load_data' => $loadData));
		if (empty($form)) {
			return false;
		}

		// Determine correct permissions to check.
		if ($this->getState('apartment.id')) {
			// Existing record. Can only edit in selected categories.
			$form->setFieldAttribute('#FIELD_CATEGORY_ID#', 'action', 'core.edit');
		} else {
			// New record. Can only create in selected categories.
			$form->setFieldAttribute('#FIELD_CATEGORY_ID#', 'action', 'core.create');
		}

		// Modify the form based on access controls.
		if (!$this->canEditState((object) $data)) {
			// Disable fields for display.
			$form->setFieldAttribute('ordering', 'disabled', 'true');
			$form->setFieldAttribute('publish_up', 'disabled', 'true');
			$form->setFieldAttribute('publish_down', 'disabled', 'true');
			$form->setFieldAttribute('state', 'disabled', 'true');

			// Disable fields while saving.
			// The controller has already verified this is a record you can edit.
			$form->setFieldAttribute('ordering', 'filter', 'unset');
			$form->setFieldAttribute('publish_up', 'filter', 'unset');
			$form->setFieldAttribute('publish_down', 'filter', 'unset');
			$form->setFieldAttribute('state', 'filter', 'unset');
		}

		return $form;
	}

	/**
	 * Method to get the data that should be injected in the form.
	 *
	 * @return	mixed	The data for the form.
	 * @since	1.6
	 */
	protected function loadFormData()
	{
		// Check the session for previously entered form data.
		$data = JFactory::getApplication()->getUserState('com_rental.edit.apartment.data', array());

		if (empty($data))
			$data = $this->getItem();

		return $data;
	}

	/**
	 * A protected method to get a set of ordering conditions.
	 *
	 * @param	object	A record object.
	 * @return	array	An array of conditions to add to add to ordering queries.
	 * @since	1.6
	 */
	protected function getReorderConditions($table)
	{
		$condition = array();
		
		$condition[] = 'state >= 0';
		return $condition;
	}
	
	public function getItem()
	{
		$item = parent::getItem();
		
		$item->images = null;
		
		return $item;
	}
	
	private function _getImages($apartmentId)
	{
		$db = JFactory::getDbo();
		
		$query = $db->getQuery(true);
		
		$query->select('*')
				->from('#__retal_apartment_images')
				->where('apartment_id=' . (int) $apartmentId)
			;
	}
	
	public function save($data)
	{
		$result = parent::save($data);
		
		$itemId = $this->getState($this->getName().'.id');
		$record = $this->getItem($itemId);
		
		if ($result)
		{
			$post = JRequest::get('post');
			
			$uploadPath 		= JPATH_ROOT . DS . 'images' . DS . 'com_rental' . DS . 'upload' . DS;
				
			//upload file
			$imagesUpload = $this->uploadFiles('img-' . $record->id, $uploadPath);
				
			$delImage = isset($post['jform']['del_image']) ? $post['jform']['del_image'] : null;
				
			//get old images
			$oldImages = unserialize($record->images);
				
			if(is_array($oldImages) && is_array($delImage))
			{
				foreach ($delImage as $img)
				{
					if(in_array($img, $oldImages))
					{
						//search key by value
						$delKey = array_search($img, $oldImages);
			
						//remove image
						@unlink($uploadPath . $img);
			
						//unset in old image
						unset($oldImages[$delKey]);
					}
				}
			}
				
			$oldImages = (is_array($oldImages)) ? $oldImages : array();
				
			//set image to update
			$images = (is_array($imagesUpload)) ? array_merge($oldImages, $imagesUpload) : $oldImages;
				
			//save image
			$query = "UPDATE #__je_products SET images = '".serialize($images)."' WHERE id = " . (int) $record->id;
			$db->setQuery($query);
				
			$db->query();
		}
		
		return $result;
	}
	
	function uploadFiles($fileName, $uploadPath)
	{
		//require upload file
		require_once JPATH_ROOT . '/jelibs/classes/upload.class.php';
	
		//define upload path
		$uploadPathMore = date('Y') . DS . date('m') . DS . date('d') . DS;
		$uploadPath .= $uploadPathMore;
	
		//echo $uploadPath; die;
	
		$files = JRequest::get('files');
		$post = JRequest::get('post');
	
		$files = $files['jform'];
		$arrOrder = $post['jform']['images']['order'];
	
		$arr_1 = array();
		$arr_2 = array();
	
		foreach ($arrOrder as $key => $order)
		{
			if(!$order)
				$arr_1[$key] = '';
			else
				$arr_2[$key] = $order;
		}
	
		asort($arr_2);
	
		$arrOrder = $arr_1 + $arr_2;
	
		$name = array();
		$data = array();
	
		foreach ($arrOrder as $key => $order)
		{
				
			if($files['name']['images'][$key] != '' && !$files['error']['images'][$key])
			{
				//set image name
				$imageName = $fileName . '-' . time() . '.' . end(explode('.', $files['name']['images'][$key]));
	
				//upload file
				$upload = upload::file($files, 'images', $uploadPath, $imageName, $key, false);
	
				//if upload OK
				if(is_array($upload) && $upload['result'] == 'OK')
				{
					$data[] = str_replace(DS, '/', $uploadPathMore) . $upload['file_name'];
				}
				else
				{
					JError::raiseNotice('UPLOAD_ERROR', 'Upload Error');
				}
			}
		}
	
		//$data = serialize($data);
	
		return $data;
	}
}
