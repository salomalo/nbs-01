<?php
/**
 * @version		$Id: renter.php $
 * @copyright	Copyright (C) 2005 - 2011 Open Source Matters, Inc. All rights reserved.
 * @license		GNU General Public License version 2 or later; see LICENSE.txt
 * @author		muinx
 * This component was generated by http://joomlavietnam.net/ - 2012
 */
 
/**
 Generate by Component Gen Code - 2012
 */

// No direct access.
defined('_JEXEC') or die;

jimport('joomla.application.component.modeladmin');

/**
 * Agent model.
 *
 * @package		Joomla.Administrator
 * @subpackage	com_rental
 * @since		1.6
 */
class RentalModelRenter extends JModelAdmin
{
	/**
	 * @var		string	The prefix to use with controller messages.
	 * @since	1.6
	 */
	protected $text_prefix = 'COM_RENTAL_RENTER';

	/**
	 * Returns a reference to the a Table object, always creating it.
	 *
	 * @param	type	The table type to instantiate
	 * @param	string	A prefix for the table class name. Optional.
	 * @param	array	Configuration array for model. Optional.
	 * @return	JTable	A database object
	 * @since	1.6
	 */
	public function getTable($type = 'Renter', $prefix = 'RentalTable', $config = array())
	{
		return JTable::getInstance($type, $prefix, $config);
	}

	/**
	 * Method to get the record form.
	 *
	 * @param	array	$data		Data for the form.
	 * @param	boolean	$loadData	True if the form is to load its own data (default case), false if not.
	 * @return	mixed	A JForm object on success, false on failure
	 * @since	1.6
	 */
	public function getForm($data = array(), $loadData = true)
	{
		// Get the form.
		$form = $this->loadForm('com_rental.renter', 'renter', array('control' => 'jform', 'load_data' => $loadData));
		if (empty($form)) {
			return false;
		}

		// Determine correct permissions to check.
		if ($this->getState('renter.id')) {
			// Existing record. Can only edit in selected categories.
			$form->setFieldAttribute('#FIELD_CATEGORY_ID#', 'action', 'core.edit');
		} else {
			// New record. Can only create in selected categories.
			$form->setFieldAttribute('#FIELD_CATEGORY_ID#', 'action', 'core.create');
		}

		// Modify the form based on access controls.
		if (!$this->canEditState((object) $data)) {
			// Disable fields for display.
			$form->setFieldAttribute('ordering', 'disabled', 'true');
			$form->setFieldAttribute('publish_up', 'disabled', 'true');
			$form->setFieldAttribute('publish_down', 'disabled', 'true');
			$form->setFieldAttribute('state', 'disabled', 'true');

			// Disable fields while saving.
			// The controller has already verified this is a record you can edit.
			$form->setFieldAttribute('ordering', 'filter', 'unset');
			$form->setFieldAttribute('publish_up', 'filter', 'unset');
			$form->setFieldAttribute('publish_down', 'filter', 'unset');
			$form->setFieldAttribute('state', 'filter', 'unset');
		}

		return $form;
	}

	/**
	 * Method to get the data that should be injected in the form.
	 *
	 * @return	mixed	The data for the form.
	 * @since	1.6
	 */
	protected function loadFormData()
	{
		// Check the session for previously entered form data.
		$data = JFactory::getApplication()->getUserState('com_rental.edit.renter.data', array());

		if (empty($data))
			$data = $this->getItem();
		
		if (is_object($data))
		{
			if (isset($data->financial_info))
			{
				$fin = unserialize($data->financial_info);
				$data->renter_gross_salary = $fin['gross_salary'];
				$data->renter_credit_score = $fin['credit_score'];
				$data->renter_has_guarantor = $fin['has_guarantor'];
			}
		}
		elseif (is_array($data))
		{
			if (isset($data['financial_info']))
			{
				$fin = unserialize($data['financial_info']);
				$data['renter_gross_salary'] = $fin['gross_salary'];
				$data['renter_credit_score'] = $fin['credit_score'];
				$data['renter_has_guarantor'] = $fin['has_guarantor'];
			}
		}

		return $data;
	}
	
	public function save($data)
	{
		$apartmenSize = serialize($data['apartment_size']);
		$neighborhood = serialize($data['neighborhood_ids']);
		$roommatesEmail = serialize($data['email_alert']);
		$financialInfo = array(
				'gross_salary' 	=> isset($data['renter_gross_salary']) ? $data['renter_gross_salary'] : '',
				'credit_score' 	=> isset($data['renter_credit_score']) ? $data['renter_credit_score'] : '',
				'has_guarantor' => isset($data['renter_has_guarantor']) ? $data['renter_has_guarantor'] : ''
		);
		
		// 		var_dump($user, $data, $financialInfo);
		
		$financialInfo = serialize($financialInfo);
		
		$data['neighborhood_ids'] 	= $neighborhood;
		$data['apartment_size'] 	= $apartmenSize;
		$data['financial_info'] 	= $financialInfo;
		$data['email_alert'] 		= $roommatesEmail;
		
// 		var_dump($data); die;
		
		$return = parent::save($data);
		
		return $return;
	}

	/**
	 * A protected method to get a set of ordering conditions.
	 *
	 * @param	object	A record object.
	 * @return	array	An array of conditions to add to add to ordering queries.
	 * @since	1.6
	 */
	protected function getReorderConditions($table)
	{
		$condition = array();
		
		$condition[] = 'state >= 0';
		return $condition;
	}
}
