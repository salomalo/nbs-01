<?php

/**
 * @version		$Id: agents.php $
 * @copyright	Copyright (C) 2005 - 2011 Open Source Matters, Inc. All rights reserved.
 * @license		GNU General Public License version 2 or later; see LICENSE.txt
 * @author		muinx
 * This component was generated by http://joomlavietnam.net/ - 2012
 */
/**
  Generate by Component Gen Code - 2012
 */
defined('_JEXEC') or die;

jimport('joomla.application.component.modellist');

/**
 * Methods supporting a list of Agents records.
 *
 * @package		Joomla.Administrator
 * @subpackage	com_rental
 * @since		1.6
 */
class RentalModelRenters extends JModelList {

	/**
	 * Constructor.
	 *
	 * @param	array	An optional associative array of configuration settings.
	 * @see		JController
	 * @since	1.6
	 */
	public function __construct($config = array()) {
		if (empty($config['filter_fields'])) {
			$config['filter_fields'] = array(
				'id', '#__rental_renters.id',
				'state', '#__rental_renters.state',
				'first_name', '#__rental_renters.first_name', 'last_name', '#__rental_renters.last_name'
			);
		}

		parent::__construct($config);
	}

	#FUNCTION_GET_AUTHOR#

	/**
	 * Build an SQL query to load the list data.
	 *
	 * @return	JDatabaseQuery
	 * @since	1.6
	 */
	protected function getListQuery() {
		// Initialise variables.
		$db = $this->getDbo();
		$query = $db->getQuery(true);

		// Select the required fields from the table.
		$query->select(
				$this->getState(
						'list.select', '#__rental_renters.id, #__rental_renters.state, #__rental_renters.checked_out AS checked_out, #__rental_renters.checked_out_time AS checked_out_time, 
				#__rental_renters.publish_up, #__rental_renters.publish_down, #__rental_renters.ordering
				, #__rental_renters.first_name, #__rental_renters.last_name'
				)
		);
		$query->from('`#__rental_renters`');

		// Join over the users for the checked out user.
		$query->select('uc.name AS editor');
		$query->join('LEFT', '#__users AS uc ON uc.id=#__rental_renters.checked_out');

		// Join over the users
		$query->select('users_0.username AS users_0_username, users_0.id AS users_0_userid');
		$query->join('INNER', '#__users AS users_0 ON users_0.id = #__rental_renters.user_id');

		// Filter by published state
		$published = $this->getState('filter.state');
		if (is_numeric($published)) {
			$query->where('#__rental_renters.state = ' . (int) $published);
		} else if ($published === '') {
			$query->where('(#__rental_renters.state IN (0, 1))');
		}


		// Filter by search
		$search = $this->getState('filter.search');
		if (!empty($search)) {
			$searchLike = $db->Quote('%' . $db->getEscaped($search, true) . '%');
			$search = $db->Quote($db->getEscaped($search, true));
			$query->where('(#__rental_renters.id = ' . $search . ' OR #__rental_renters.first_name LIKE ' . $searchLike . ' OR #__rental_renters.last_name LIKE ' . $searchLike . ')');
		} //end search
		// Add the list ordering clause.
		$orderCol = $this->state->get('list.ordering');
		$orderDirn = $this->state->get('list.direction');

		$query->order($db->getEscaped($orderCol . ' ' . $orderDirn));

		//echo nl2br(str_replace('#__','jos_',$query));
		return $query;
	}

	/**
	 * Returns a reference to the a Table object, always creating it.
	 *
	 * @param	type	The table type to instantiate
	 * @param	string	A prefix for the table class name. Optional.
	 * @param	array	Configuration array for model. Optional.
	 * @return	JTable	A database object
	 * @since	1.6
	 */
	public function getTable($type = 'Agents', $prefix = 'RentalTable', $config = array()) {
		return JTable::getInstance($type, $prefix, $config);
	}

	/**
	 * Method to auto-populate the model state.
	 *
	 * Note. Calling getState in this method will result in recursion.
	 *
	 * @since	1.6
	 */
	protected function populateState($ordering = null, $direction = null) {
		// Initialise variables.
		$app = JFactory::getApplication('administrator');

		// Load the filter state.
		$search = $this->getUserStateFromRequest($this->context . '.filter.search', 'filter_search');
		$this->setState('filter.search', $search);

		$state = $this->getUserStateFromRequest($this->context . '.filter.state', 'filter_state', '', 'string');
		$this->setState('filter.state', $state);

		// List state information.
		parent::populateState('#__rental_renters.id', 'DESC');
	}

}